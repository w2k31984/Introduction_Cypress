"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelperAndroid = void 0;
class HelperAndroid {
    constructor(options) {
        this._spec = options.spec;
        this._element = options.element;
        this._legacy = options.legacy;
        this._logger = options.logger;
    }
    static async make(options) {
        const { spec, driver, logger } = options;
        let legacy = false;
        let element = await driver.element({
            type: 'xpath',
            selector: '//*[@content-desc="EyesAppiumHelperEDT"]',
        });
        if (!element) {
            legacy = true;
            element = await driver.element({
                type: '-android uiautomator',
                selector: 'new UiSelector().description("EyesAppiumHelper")',
            });
        }
        return element ? new HelperAndroid({ spec, element, legacy, logger }) : null;
    }
    async _getElementId(element) {
        const resourceId = await element.getAttribute('resource-id');
        if (!resourceId)
            return null;
        return resourceId.split('/')[1];
    }
    async getContentSize(element) {
        let contentHeight;
        if (this._legacy) {
            await this._element.click();
            contentHeight = await this._element.getText();
        }
        else {
            const elementId = await this._getElementId(element);
            if (!elementId)
                return null;
            await this._element.type(`offset;${elementId};0;0;0`);
            await this._element.click();
            contentHeight = await this._element.getText();
            await this._element.type('');
        }
        const region = await this._spec.getElementRegion(this._element.driver.target, element.target);
        return { width: region.width, height: Number(contentHeight) };
    }
    async getRegion(element) {
        if (this._legacy)
            return null;
        const elementId = await this._getElementId(element);
        if (!elementId)
            return null;
        await this._element.type(`getRect;${elementId};0;0`);
        await this._element.click();
        const regionString = await this._element.getText();
        await this._element.type('');
        const [, x, y, height, width] = regionString.match(/\[(-?\d+(?:\.\d+)?);(-?\d+(?:\.\d+)?);(-?\d+(?:\.\d+)?);(-?\d+(?:\.\d+)?)\]/);
        const region = { x: Number(x), y: Number(y), width: Number(width), height: Number(height) };
        if (Number.isNaN(region.x + region.y + region.width + region.height))
            return null;
        return region;
    }
}
exports.HelperAndroid = HelperAndroid;
