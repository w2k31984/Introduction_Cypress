"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitSelector = exports.transformSelector = exports.isSelector = exports.isCommonSelector = void 0;
const utils = __importStar(require("@applitools/utils"));
function isCommonSelector(spec, selector) {
    return (utils.types.isPlainObject(selector) &&
        utils.types.has(selector, 'selector') &&
        (utils.types.isString(selector.selector) || spec.isSelector(selector.selector)));
}
exports.isCommonSelector = isCommonSelector;
function isSelector(spec, selector) {
    return spec.isSelector(selector) || utils.types.isString(selector) || isCommonSelector(spec, selector);
}
exports.isSelector = isSelector;
function transformSelector(spec, selector, environment) {
    var _a, _b;
    if ((environment === null || environment === void 0 ? void 0 : environment.isWeb) && isCommonSelector(spec, selector)) {
        if (selector.type === 'id')
            selector = { type: 'css', selector: `#${selector.selector}` };
        if (selector.type === 'name')
            selector = { type: 'css', selector: `[name="${selector.selector}"]` };
        if (selector.type === 'class name')
            selector = { type: 'css', selector: `.${selector.selector}` };
    }
    return (_b = (_a = spec.transformSelector) === null || _a === void 0 ? void 0 : _a.call(spec, selector)) !== null && _b !== void 0 ? _b : selector;
}
exports.transformSelector = transformSelector;
function splitSelector(spec, selector) {
    let targetSelector = selector;
    let activeSelector = {};
    let elementSelector = activeSelector;
    const contextSelectors = [];
    while (targetSelector) {
        if (isCommonSelector(spec, targetSelector)) {
            activeSelector.selector = targetSelector.selector;
            if (targetSelector.type)
                activeSelector.type = targetSelector.type;
            if (targetSelector.shadow) {
                activeSelector = activeSelector.shadow = {};
                targetSelector = targetSelector.shadow;
            }
            else if (targetSelector.frame) {
                contextSelectors.push(elementSelector);
                elementSelector = activeSelector = {};
                targetSelector = targetSelector.frame;
            }
            else {
                targetSelector = null;
            }
        }
        else {
            activeSelector.selector = targetSelector;
            targetSelector = null;
        }
    }
    return { contextSelectors, elementSelector };
}
exports.splitSelector = splitSelector;
